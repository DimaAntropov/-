import asyncio
import aiohttp
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7540008294:AAFCR77AHQDAwFwFM2VoV8vWU_HI8R9RBtQ'  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
STEAM_API_KEY = '78A97ED62C016B43824A3F16C36B1D78'   # –í–∞—à Steam API Key (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://steamcommunity.com/dev/apikey)
STEAM_URL = "https://api.steampowered.com/ISteamApps/GetAppList/v2"  # API –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
NEWS_URL = "https://api.steampowered.com/ISteamNews/GetNewsForApp/v2"  # API –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–≥—Ä

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å)
MONITORED_GAMES = {
    730: "Counter-Strike: Global Offensive",  # CS:GO
    570: "Dota 2",
    440: "Team Fortress 2",
    374320: "Rust",
    294100: "Grand Theft Auto V",
    578080: "PUBG",
    892970: "Apex Legends",
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
last_known_news = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–≥—Ä—ã
async def fetch_game_news(app_id):
    params = {
        "appid": app_id,
        "count": 5,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
        "maxlength": 300,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
        "format": "json",
        "key": STEAM_API_KEY
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(NEWS_URL, params=params) as response:
            data = await response.json()
            if 'appnews' in data and 'newsitems' in data['appnews']:
                return data['appnews']['newsitems']
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def check_for_updates():
    global last_known_news
    while True:
        updates_found = False
        for app_id, game_name in MONITORED_GAMES.items():
            news_items = await fetch_game_news(app_id)
            if not news_items:
                continue
            for news in news_items:
                news_id = news['gid']  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–æ–≤–æ—Å—Ç–∏
                if app_id not in last_known_news or news_id not in last_known_news[app_id]:
                    # –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞
                    updates_found = True
                    update_message = (
                        f"üéÆ {game_name}\n"
                        f"üìù {news['title']}\n"
                        f"üîó {news['url']}\n"
                    )
                    print(f"–ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_message}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                    user_ids = [123456789]  # –ü—Ä–∏–º–µ—Ä ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for user_id in user_ids:
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await bot.send_message(user_id, update_message)
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏
                    if app_id not in last_known_news:
                        last_known_news[app_id] = set()
                    last_known_news[app_id].add(news_id)

        if not updates_found:
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(600)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    week_button = InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏", callback_data="week_updates")
    month_button = InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞", callback_data="month_updates")
    keyboard.add(week_button, month_button)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏–≥—Ä –≤ Steam.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data in ["week_updates", "month_updates"])
async def handle_updates(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    if callback_query.data == "week_updates":
        time_delta = timedelta(weeks=1)
    elif callback_query.data == "month_updates":
        time_delta = timedelta(days=30)

    start_date = int((datetime.now() - time_delta).timestamp())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for app_id, game_name in MONITORED_GAMES.items():
        news_items = await fetch_game_news(app_id)
        for news in news_items:
            if int(news.get('date', 0)) >= start_date:
                update_message = (
                    f"üéÆ {game_name}\n"
                    f"üìù {news['title']}\n"
                    f"üîó {news['url']}\n"
                )
                try:
                    await bot.send_message(callback_query.from_user.id, update_message)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.id}: {e}")

    if not news_items:
        await bot.send_message(callback_query.from_user.id, "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def on_startup(dp):
    asyncio.create_task(check_for_updates())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)