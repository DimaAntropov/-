from aiogram import Dispatcher, types, Bot
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards import get_main_keyboard, get_period_keyboard, get_additional_keyboard, get_quiz_keyboard, get_settings_keyboard, get_tracking_keyboard, get_notifications_keyboard, get_feedback_keyboard, get_back_to_period_keyboard, get_back_to_main_keyboard
from database import add_user, subscribe_user, unsubscribe_user, get_updates_by_period, add_quiz_question, get_random_quiz_question, update_user_preferences, get_user_preferences, update_user_score, get_user_score, get_leaderboard, get_update_stats, add_tournament, get_upcoming_tournaments, get_subscribed_users, get_user_by_id
from config import GAMES, STEAM_API_KEY, DEVELOPER_CHAT_ID
from datetime import datetime, timedelta
import aiohttp
import asyncio
from cachetools import TTLCache

# –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
cache = TTLCache(maxsize=100, ttl=3600)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserState(StatesGroup):
    selecting_period = State()
    answering_quiz = State()
    selecting_settings = State()
    selecting_tracking = State()
    selecting_feedback = State()
    viewing_game_updates = State()  # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä—ã

def register_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–æ—Ç–∞."""

    @dp.message(Command("start"))
    async def start_command(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        add_user(user_id)
        # Send the initial message and store its message_id in the state
        sent_message = await message.answer(
            "üåü –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä –≤ Steam! üåü\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=get_main_keyboard()
        )
        await state.update_data(message_id=sent_message.message_id)
        await state.clear()  # Clear any previous state

    @dp.message(Command("help"))
    async def help_command(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        await message.answer(
            "‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
            "–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä –≤ Steam! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üîî *–û–±–Ω–æ–≤–ª–µ–Ω–∏—è* ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–≤–æ–∏–º –ª—é–±–∏–º—ã–º –∏–≥—Ä–∞–º.\n"
            "üéÆ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ* ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä –≤ Steam.\n"
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* ‚Äî –Ω–∞—Å—Ç—Ä–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–≥—Ä –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n"
            "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤* ‚Äî —Å–º–æ—Ç—Ä–∏ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n"
            "üèÖ *–¢—É—Ä–Ω–∏—Ä—ã* ‚Äî —É–∑–Ω–∞–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö.\n"
            "‚≠ê *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏* ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É –Ω–æ–≤—ã–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è.\n"
            "üì© *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å* ‚Äî –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–∏ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start üòä"
        )
        await state.clear()

    @dp.callback_query(lambda c: c.data == "updates")
    async def show_updates(callback: types.CallbackQuery, state: FSMContext):
        preferences = get_user_preferences(callback.from_user.id)
        if not preferences:
            await callback.message.edit_text(
                "üîî –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' -> 'üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'.",
                reply_markup=get_main_keyboard()
            )
            return
        await callback.message.edit_text(
            "üïí –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:",
            reply_markup=get_period_keyboard()
        )
        await state.set_state(UserState.selecting_period)
        await state.update_data(context="updates")
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "back_to_period")
    async def back_to_period(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üïí –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:",
            reply_markup=get_period_keyboard()
        )
        await state.set_state(UserState.selecting_period)
        await state.update_data(context="updates")
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("period_"))
    async def process_period(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        context = data.get("context")
        period = callback.data.replace("period_", "")
        now = datetime.now()
        if period == "day":
            delta = timedelta(days=1)
        elif period == "week":
            delta = timedelta(weeks=1)
        elif period == "month":
            delta = timedelta(days=30)
        else:
            await callback.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=get_main_keyboard())
            await state.clear()
            return

        if context == "updates":
            updates = get_updates_by_period(now - delta)
            preferences = get_user_preferences(callback.from_user.id)
            response = "üîî –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n"
            for update in updates:
                if update["game"] in preferences:
                    response += f"üéÆ {update['game']}: {update['title']}\nüîó {update['url']}\n\n"
            await callback.message.edit_text(
                response or "‚ö†Ô∏è –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.",
                reply_markup=get_back_to_period_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            )
        elif context == "stats":
            stats = get_update_stats(now - delta)
            buttons = []
            response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∑–∞ {period}):\n\n"
            for stat in stats:
                game = stat['_id']
                count = stat['count']
                response += f"üéÆ {game}: {count} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n"
                buttons.append([types.InlineKeyboardButton(text=f"üéÆ {game} ({count} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)", callback_data=f"view_updates_{game}")])
            buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.edit_text(
                response or "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.",
                reply_markup=keyboard
            )
            await state.update_data(period=period)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ

        await state.set_state(UserState.viewing_game_updates)
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("view_updates_"))
    async def view_game_updates(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã."""
        game = callback.data.replace("view_updates_", "")
        data = await state.get_data()
        period = data.get("period", "month")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        now = datetime.now()
        if period == "day":
            delta = timedelta(days=1)
        elif period == "week":
            delta = timedelta(weeks=1)
        elif period == "month":
            delta = timedelta(days=30)
        else:
            delta = timedelta(days=30)

        updates = get_updates_by_period(now - delta)
        response = f"üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {game} (–∑–∞ {period}):\n\n"
        game_updates = [update for update in updates if update["game"] == game]
        for update in game_updates:
            response += f"üìå {update['title']}\nüîó {update['url']}\n\n"

        buttons = [[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")]]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(
            response or f"‚ö†Ô∏è –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è {game} –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.",
            reply_markup=keyboard
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "additional")
    async def additional_features(callback: types.CallbackQuery):
        await callback.message.edit_text(
            "üéÆ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:",
            reply_markup=get_additional_keyboard()
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "settings")
    async def show_settings(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
            reply_markup=get_settings_keyboard()
        )
        await state.set_state(UserState.selecting_settings)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "back_to_settings")
    async def back_to_settings(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
            reply_markup=get_settings_keyboard()
        )
        await state.set_state(UserState.selecting_settings)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "tracking")
    async def show_tracking(callback: types.CallbackQuery, state: FSMContext):
        preferences = get_user_preferences(callback.from_user.id)
        await state.update_data(preferences=preferences)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback.message.edit_text(
            "üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n(–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—ã, –æ—Ç–º–µ—Ç—å—Ç–µ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –∏ –Ω–∞–∂–º–∏—Ç–µ üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å.)",
            reply_markup=get_tracking_keyboard(preferences)
        )
        await state.set_state(UserState.selecting_tracking)
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("setting_"))
    async def toggle_setting(callback: types.CallbackQuery, state: FSMContext):
        game = callback.data.replace("setting_", "")
        data = await state.get_data()
        preferences = data.get("preferences", [])  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if game in preferences:
            preferences.remove(game)
        else:
            preferences.append(game)
        await state.update_data(preferences=preferences)  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        current_state = await state.get_state()
        if current_state == UserState.selecting_tracking.state:
            await callback.message.edit_text(
                "üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n(–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—ã, –æ—Ç–º–µ—Ç—å—Ç–µ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –∏ –Ω–∞–∂–º–∏—Ç–µ üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å.)",
                reply_markup=get_tracking_keyboard(preferences)
            )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "select_all_categories")
    async def select_all_categories(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'."""
        preferences = list(GAMES.keys())  # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã –∏–∑ GAMES
        await state.update_data(preferences=preferences)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state == UserState.selecting_tracking.state:
            await callback.message.edit_text(
                "üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n(–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—ã, –æ—Ç–º–µ—Ç—å—Ç–µ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –∏ –Ω–∞–∂–º–∏—Ç–µ üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å.)",
                reply_markup=get_tracking_keyboard(preferences)
            )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "save_settings")
    async def save_settings(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        preferences = data.get("preferences", [])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        update_user_preferences(callback.from_user.id, preferences)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await callback.message.edit_text(
            "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "cancel_tracking")
    async def cancel_tracking(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üåü –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "notifications")
    async def show_notifications(callback: types.CallbackQuery):
        await callback.message.edit_text(
            "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:",
            reply_markup=get_notifications_keyboard()
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "subscribe")
    async def subscribe(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        user = get_user_by_id(user_id)
        if not user:
            add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
            await callback.message.edit_text(
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        elif not user.get("subscribed", False):
            subscribe_user(user_id)
            await callback.message.edit_text(
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "unsubscribe")
    async def unsubscribe(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        user = get_user_by_id(user_id)
        if user and user.get("subscribed", True):
            unsubscribe_user(user_id)
            await callback.message.edit_text(
                "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=get_main_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ÑπÔ∏è –í—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=get_main_keyboard()
            )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "quiz")
    async def start_quiz(callback: types.CallbackQuery, state: FSMContext):
        quiz = get_random_quiz_question()
        if quiz:
            await state.update_data(quiz_id=quiz["_id"], correct_answer=quiz["correct_answer"])
            await callback.message.edit_text(
                f"‚ùì –£–≥–∞–¥–∞–π—Ç–µ –∏–≥—Ä—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n{quiz['question']}",
                reply_markup=get_quiz_keyboard(quiz["options"])
            )
            await state.set_state(UserState.answering_quiz)
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
                reply_markup=get_main_keyboard()
            )
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("quiz_answer_"))
    async def process_quiz_answer(callback: types.CallbackQuery, state: FSMContext):
        user_answer = callback.data.replace("quiz_answer_", "")
        user_data = await state.get_data()
        correct_answer = user_data.get("correct_answer")

        if user_answer == correct_answer:
            user_id = callback.from_user.id
            update_user_score(user_id, 1)
            await callback.message.edit_text(
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! (+1 –æ—á–∫–æ)",
                reply_markup=get_back_to_main_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}",
                reply_markup=get_back_to_main_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            )

        await state.clear()
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "leaderboard")
    async def show_leaderboard(callback: types.CallbackQuery):
        leaderboard = get_leaderboard()
        response = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
        for i, user in enumerate(leaderboard, 1):
            response += f"{i}. User {user['user_id']} ‚Äî {user['score']} –æ—á–∫–æ–≤\n"
        await callback.message.edit_text(
            response or "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤.",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "stats")
    async def show_stats(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üìä –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_period_keyboard()
        )
        await state.set_state(UserState.selecting_period)
        await state.update_data(context="stats")
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "tournaments")
    async def show_tournaments(callback: types.CallbackQuery):
        tournaments = get_upcoming_tournaments()
        response = "üèÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
        for tournament in tournaments:
            response += f"üéÆ {tournament['event_name']} ({tournament['game']})\nüìÖ –î–∞—Ç–∞: {tournament['date']}\nüîó {tournament['url']}\n\n"
        await callback.message.edit_text(
            response or "‚ö†Ô∏è –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "recommend")
    async def recommend_games(callback: types.CallbackQuery):
        preferences = get_user_preferences(callback.from_user.id)
        if not preferences:
            await callback.message.edit_text(
                "üîî –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' -> 'üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'.",
                reply_markup=get_main_keyboard()
            )
            return
        recommendations = await get_game_recommendations(preferences)
        response = "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–≥—Ä—ã:\n\n"
        for game in recommendations[:3]:
            response += f"üéÆ {game['name']} ‚Äî {game['description']}\nüîó {game['url']}\n\n"
        await callback.message.edit_text(
            response or "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "feedback")
    async def show_feedback(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üì© **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É! üòä\n"
            "–ü—Ä–∏–º–µ—Ä: '–•–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é X' –∏–ª–∏ '–ï—Å—Ç—å –±–∞–≥ Y'.",
            reply_markup=get_feedback_keyboard()
        )
        await state.set_state(UserState.selecting_feedback)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "back_to_main")
    async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üåü –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        await callback.answer()

    async def get_game_recommendations(preferences):
        if "recommendations" in cache:
            return cache["recommendations"]

        async with aiohttp.ClientSession() as session:
            url = f"http://api.steampowered.com/ISteamApps/GetAppList/v2/?key={STEAM_API_KEY}"
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    apps = data.get("applist", {}).get("apps", [])
                    recommendations = []
                    for app in apps:
                        appid = app["appid"]
                        name = app["name"]
                        if appid in GAMES.values() and name not in preferences:
                            recommendations.append({
                                "name": name,
                                "description": "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ Steam!",
                                "url": f"https://store.steampowered.com/app/{appid}"
                            })
                    cache["recommendations"] = recommendations[:5]
                    return recommendations
        return []

    @dp.message(lambda message: message.text)
    async def handle_feedback(message: types.Message, state: FSMContext, bot: Bot):
        current_state = await state.get_state()
        data = await state.get_data()
        message_id = data.get("message_id")

        if current_state == UserState.selecting_feedback.state and message_id:
            feedback_text = message.text
            user_id = message.from_user.id
            user_name = message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º"
            try:
                # Edit the main message to confirm feedback submission
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    text=f"üì© –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{feedback_text}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n"
                         "üåü –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                    reply_markup=get_main_keyboard()
                )
                # Send feedback to developer
                await bot.send_message(
                    chat_id=DEVELOPER_CHAT_ID,
                    text=f"üîî –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id}):\n\n{feedback_text}"
                )
            except Exception as e:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.",
                    reply_markup=get_main_keyboard()
                )
            await state.clear()
        else:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            await message.answer(
                "ü§î –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é!"
            )

if __name__ == "__main__":
    from aiogram import Bot
    from config import TELEGRAM_TOKEN

    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher()
    register_handlers(dp)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    add_quiz_question(
        "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ Basalt –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–≥—Ä—É.",
        ["CS:GO", "Rust", "Dota 2"],
        "CS:GO"
    )
    add_quiz_question(
        "–î–æ–±–∞–≤–ª–µ–Ω—ã siege weapons –∏ shields.",
        ["CS:GO", "Rust", "Team Fortress 2"],
        "Rust"
    )
    add_quiz_question(
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 7.38b –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∏–∫—Å—ã –¥–ª—è –≥–µ—Ä–æ–µ–≤.",
        ["CS:GO", "Dota 2", "PUBG"],
        "Dota 2"
    )
    add_tournament(
        "CS:GO Major 2025",
        "CS:GO",
        datetime(2025, 3, 15),
        "https://www.hltv.org/events/1234/csgo-major-2025"
    )
    add_tournament(
        "The International 2025",
        "Dota 2",
        datetime(2025, 7, 1),
        "https://www.dota2.com/international"
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.run(dp.start_polling(bot))