import asyncio
import aiohttp
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '7540008294:AAFCR77AHQDAwFwFM2VoV8vWU_HI8R9RBtQ'  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
STEAM_API_KEY = '78A97ED62C016B43824A3F16C36B1D78'   # –í–∞—à Steam API Key (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://steamcommunity.com/dev/apikey)
STEAM_URL = "https://api.steampowered.com/ISteamApps/GetAppList/v2"  # API –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
NEWS_URL = "https://api.steampowered.com/ISteamNews/GetNewsForApp/v2"  # API –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–≥—Ä

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä
MONITORED_GAMES = {
    730: "Counter-Strike: Global Offensive",  # CS:GO
    570: "Dota 2",
    440: "Team Fortress 2",
    374320: "Rust",
    294100: "Grand Theft Auto V",
    578080: "PUBG",
    892970: "Apex Legends",
}

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä
CATEGORY_LINKS = {
    'action': 'https://store.steampowered.com/category/action/',
    'strategy': 'https://store.steampowered.com/category/strategy?l=russian',
    'rpg': 'https://store.steampowered.com/category/rpg',
    'racing': 'https://store.steampowered.com/category/racing',
}

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º—É–∑—ã–∫–∏
MUSIC_LINKS = {
    'chill': 'https://uppbeat.io/music/category/chill',  # Chill music
    'action': 'https://uppbeat.io/browse/collection/fps-action',  # Action music
    'workout': 'https://vk.com/music/playlist/558600949_71',  # Workout music
    'meloman': 'https://rus.hitmotop.com/collection/9414'   # Meloman music
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
last_known_news = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–≥—Ä—ã
async def fetch_game_news(app_id):
    params = {
        "appid": app_id,
        "count": 5,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
        "maxlength": 300,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
        "format": "json",
        "key": STEAM_API_KEY
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(NEWS_URL, params=params) as response:
            data = await response.json()
            if 'appnews' in data and 'newsitems' in data['appnews']:
                return data['appnews']['newsitems']
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def check_for_updates():
    global last_known_news
    while True:
        updates_found = False
        for app_id, game_name in MONITORED_GAMES.items():
            news_items = await fetch_game_news(app_id)
            if not news_items:
                continue
            for news in news_items:
                news_id = news['gid']  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–æ–≤–æ—Å—Ç–∏
                if app_id not in last_known_news or news_id not in last_known_news[app_id]:
                    # –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞
                    updates_found = True
                    update_message = (
                        f"üéÆ {game_name}\n"
                        f"üìù {news['title']}\n"
                        f"üîó {news['url']}\n"
                    )
                    print(f"–ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_message}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                    user_ids = [123456789]  # –ü—Ä–∏–º–µ—Ä ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for user_id in user_ids:
                        try:
                            await bot.send_message(user_id, update_message)
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏
                    if app_id not in last_known_news:
                        last_known_news[app_id] = set()
                    last_known_news[app_id].add(news_id)

        if not updates_found:
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(600)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
async def get_updates_for_period(period: str, user_id: int):
    time_deltas = {
        "day": timedelta(days=1),
        "week": timedelta(weeks=1),
        "month": timedelta(days=30),
    }

    if period not in time_deltas:
        return

    start_date = int((datetime.now() - time_deltas[period]).timestamp())
    updates_found = False

    for app_id, game_name in MONITORED_GAMES.items():
        news_items = await fetch_game_news(app_id)
        for news in news_items:
            if int(news.get('date', 0)) >= start_date:
                update_message = (
                    f"üéÆ {game_name}\n"
                    f"üìù {news['title']}\n"
                    f"üîó {news['url']}\n"
                )
                try:
                    await bot.send_message(user_id, update_message)
                    updates_found = True
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    if not updates_found:
        await bot.send_message(user_id, f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({period}) –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(row_width=1)
    updates_button = InlineKeyboardButton("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", callback_data="updates")
    day_button = InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å", callback_data="day_updates")
    week_button = InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="week_updates")
    month_button = InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü", callback_data="month_updates")
    extra_features_button = InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="extra_features")
    keyboard.add(updates_button, day_button, week_button, month_button, extra_features_button)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–µ–π–º–µ—Ä—Å–∫–∏–π –±–æ—Ç. –Ø –º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä –≤ Steam, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
@dp.callback_query_handler(lambda c: c.data in ["day_updates", "week_updates", "month_updates"])
async def handle_period_updates(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    period_mapping = {
        "day_updates": "day",
        "week_updates": "week",
        "month_updates": "month",
    }

    period = period_mapping.get(callback_query.data)
    if period:
        await get_updates_for_period(period, callback_query.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
@dp.callback_query_handler(lambda c: c.data == 'extra_features')
async def extra_features(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∞–∏–º–∞", "–•–æ—á—É –ø–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É"
    keyboard = InlineKeyboardMarkup(row_width=1)
    categories_button = InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä", callback_data='categories')
    aim_training_button = InlineKeyboardButton("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∞–∏–º–∞", url="https://app.3daimtrainer.com/quick-play")
    music_button = InlineKeyboardButton("–•–æ—á—É –ø–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É", callback_data='music')
    back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.add(categories_button, aim_training_button, music_button, back_button)

    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data == 'back')
async def back_to_main_menu(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(row_width=1)
    updates_button = InlineKeyboardButton("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", callback_data="updates")
    day_button = InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å", callback_data="day_updates")
    week_button = InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="week_updates")
    month_button = InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü", callback_data="month_updates")
    extra_features_button = InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="extra_features")
    keyboard.add(updates_button, day_button, week_button, month_button, extra_features_button)

    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä"
@dp.callback_query_handler(lambda c: c.data == 'categories')
async def send_categories(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–≥—Ä
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("–≠–∫—à–µ–Ω", callback_data='action'),
        InlineKeyboardButton("–°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data='strategy'),
        InlineKeyboardButton("–†–ü–ì", callback_data='rpg'),
        InlineKeyboardButton("–ì–æ–Ω–∫–∏", callback_data='racing')
    ]
    back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.add(*buttons, back_button)

    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä:",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä
@dp.callback_query_handler(lambda c: c.data in ['action', 'strategy', 'rpg', 'racing'])
async def process_category(callback_query: types.CallbackQuery):
    category = callback_query.data
    link = CATEGORY_LINKS.get(category, 'https://example.com')  # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category.capitalize()}\n–°—Å—ã–ª–∫–∞: {link}"
    )
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–•–æ—á—É –ø–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É"
@dp.callback_query_handler(lambda c: c.data == 'music')
async def music(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º—É–∑—ã–∫–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton("–ü–æ—á–∏–ª–∏—Ç—å –Ω–∞ —Ä–∞—Å–ª–∞–±–æ–Ω–µ", url=MUSIC_LINKS['chill']),
        InlineKeyboardButton("–≠–∫—à–µ–Ω –ø–æ–¥ –±–∏—Ç–æ–∫", url=MUSIC_LINKS['action']),
        InlineKeyboardButton("–§–æ–Ω–∫ –≤ –∫–∞—á–∞–ª–æ—á–∫—É", url=MUSIC_LINKS['workout']),
        InlineKeyboardButton("–ú–µ–ª–æ–º–∞–Ω", url=MUSIC_LINKS['meloman'])
    ]
    back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.add(*buttons, back_button)

    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–ª—É—à–∞—Ç—å:",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def on_startup(dp):
    asyncio.create_task(check_for_updates())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def echo(message: types.Message):
    user_message = message.text.lower()
    if '–ø—Ä–∏–≤–µ—Ç' in user_message:
        await bot.send_message(message.chat.id, 'https://rutube.ru/video/2c0e40c8bbeb82da6d35600f9bfd162f/')
    elif '–∫–∞–∫ –¥–µ–ª–∞' in user_message:
        await bot.send_message(message.chat.id, '–£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!')
    else:
        await bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å.')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
